const fs = require("fs");
const path = require("path");
const Cart = require("./Cart");

const p = path.join(
  path.dirname(process.mainModule.filename),
  "data",
  "products.json"
);

const getProductsFromFile = (cb) => {
  fs.readFile(p, (err, fileContent) => {
    if (err) {
      cb([]);
    } else {
      cb(JSON.parse(fileContent));
    }
  });
};

module.exports = class Product {
  constructor(id, title, imageUrl, description, price) {
    this.id = id;
    this.title = title;
    this.imageUrl = imageUrl;
    this.description = description;
    this.price = price;
  }

  save() {
    getProductsFromFile((products) => {
      // The If Part is for Updating because an existing Product will have an id
      if (this.id) {
        //existingProductIndex -> this variable we are finding the product that we want to edit.
        const existingProductIndex = products.findIndex(
          (prods) => prods.id === this.id
        );
        // updateProduct Array-> we are taking whatever its inside the products
        // array and spreading it in the new Array so we can add the updated product.
        const updatedProduct = [...products];
        // Here we are changing the existing product with the updates
        // we change upon it
        updatedProduct[existingProductIndex] = this;
        // Here we need to write to our file where we are storing the
        //  information in our application for now
        fs.writeFile(p, JSON.stringify(updatedProduct), (err) => {
          console.log(err);
        });
      } else {
        // The else part is for New Products Added by the Admin where our id is generated by Math.random
        this.id = Math.random().toString();
        products.push(this);
        fs.writeFile(p, JSON.stringify(products), (err) => {
          console.log(err);
        });
      }
    });
  }

  static delete(id) {
    getProductsFromFile((products) => {
      // const id = this.id;
      // const productIndex = products.findIndex((prods) => prods.id === id);
      // const latestProduct = [...products];
      // delete latestProduct[productIndex];
      const updatedProducts = products.filter((prods) => prods.id !== id);
      const productFetch = products.find((prods) => prods.id === id);
      fs.writeFile(p, JSON.stringify(updatedProducts), (err) => {
        if (!err) {
          Cart.deleteProduct(id, productFetch.price);
        }
      });
    });
  }

  static fetchAll(cb) {
    getProductsFromFile(cb);
  }

  static fetchProductById(id, cb) {
    getProductsFromFile((products) => {
      const product = products.find((p) => p.id === id);
      cb(product);
    });
  }
};
